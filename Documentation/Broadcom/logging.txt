 Kernel Interfaces to the Broadcom logging driver
 ------------------------------------------------

	Log IDs are in the range 0 to 8191, partitioned as follows:

		   0 - 1023 :	reserved to Broadcom
		1024 - 32767:	available for custom applications

Definitions
-----------

#define BCMLOG_MAX_LOG_ID		32767		///<	maximum LOG ID
#define BCMLOG_MODULE_NAME		"bcm_log"	///<	public module name

ioctl commands
#define BCMLOG_IOC_LOGSTR	102			///<	log a string
#define BCMLOG_IOC_ENABLE	103			///<	get or set enable/disable local message logging based on ID
#define BCMLOG_IOC_LOGSIGNAL	104			///<	log a signal
#define BCMLOG_IOC_SAVECONFIG	105			///<	save configuration to PS
#define BCMLOG_IOC_RESETCONFIG	106			///<	reset configuration in PS to default

Logging output devices.  
#define BCMLOG_OUTDEV_NONE		0		///<	undefined or disabled
#define BCMLOG_OUTDEV_PANIC		1		///<	panic partition / MTD
#define BCMLOG_OUTDEV_SDCARD		2		///<	sdcard
#define BCMLOG_OUTDEV_RNDIS		3		///<	MTT/RNDIS
#define BCMLOG_OUTDEV_UART		4		///<	UART
#define BCMLOG_OUTDEV_ACM		5		///<	ACM/OBEX


Structures
----------

For the ioctl command BCMLOG_IOC_LOGSTR, a variable of this type
is passed as the 'arg' to ioctl()

typedef struct
{
	char*					str;		///<	pointer to string buffer
	int					size;		///<	size of buffer including terminating null
	unsigned short      			sender;         ///<    ID of sending task
}	BCMLOG_IoctlLogStr_t ;

For the ioctl command BCMLOG_IOC_ENABLE a variable of this type 
is passed as the 'arg' to ioctl()

typedef struct
{
	unsigned short		id ;			///<	log ID
	unsigned char		set ;			///<	if set != 0 set (write) the enable/disable status;
							///<	if set == 0 return (read) the enable/disable status
	unsigned char		enable ;		///<	if set != 0 ID logging is enabled based on this member
							///<	if set == 0 ID logging this member contains
							///<	current enabled/disabled status on return from 
							///<	ioctl call
}	BCMLOG_IoctlEnable_t ;

For the ioctl command BCMLOG_IOC_LOGSIGNAL a variable of this type 
is passed as the 'arg' to ioctl()

typedef struct
{
	unsigned int	    sigCode;	    ///<	binary signal code
	void*               sigPtr;         ///<    pointer to signal buffer
	unsigned int        sigBufSize;     ///<    size of signal buffer in bytes
	unsigned short      state;          ///<    receiving task's state information (optional)
	unsigned short      sender;         ///<    ID of sending task
}	BCMLOG_IoctlLogSignal_t ;


Functions
---------

Log null terminated string.

@param	inLogString		(in)	null terminated string to be logged
@param	inSender		(in)	ID of sending task

void BCMLOG_LogString( const char* inLogString,
                        unsigned short inSender  );


Log a formatted list of arguments

@param            inSender (in) ID of the source module
@param            *fmt (in) a format string as printf()
...               (in) a list of arguments as printf()

void BCMLOG_Printf( unsigned short inSender, char* fmt, ...) ;


Log binary signal.

@param	inSigCode		(in)	signal code
@param	inSigBuf		(in)	pointer to signal buffer
@param	inSigBufSize	(in)	size of signal buffer in bytes
@param	inState 		(in)	receiving task's state information (optional)
@param	inSender		(in)	ID of sending task

void BCMLOG_LogSignal( unsigned int inSigCode, 
                        void* inSigBuf,
                        unsigned int inSigBufSize,
                        unsigned short inState,
                        unsigned short inSender  );


Handle a CP log message from IPC server.

@param	buf		(in)	message buffer
@param	size	(in)	message length
@note	does not free the IPC message buffer

void BCMLOG_HandleCpLogMsg( const char *buf, int size ) ;


Prepare to handle CP crash dump. During CP crash
dump, all other logging requests are ignored.

void BCMLOG_StartCpCrashDump( struct file* inDumpFile );


Done with CP crash dump. Normal logging is resumed.

void BCMLOG_EndCpCrashDump( void );


Handle CP crash dump data from IPC server.

@param	buf		(in)	message buffer
@param	size	(in)	message length
@note	does not free the IPC message buffer

void BCMLOG_HandleCpCrashDumpData( const char *buf, int size );


Handle memory dump data from CP crash.

@param	address	(in)	virtual address of memory to dump
@param	size	(in)	size in bytes of buf

void BCMLOG_HandleCpCrashMemDumpData( const char* address, int size );


Log null terminated string during crash dump.

@param	inLogString		(in)	null terminated string to be logged

void BCMLOG_LogCPCrashDumpString( const char* inLogString );


Get runtime log device

int BCMLOG_GetRunlogDevice( void ) ;

